#!/usr/bin/env deno run --allow-read
import { assertEquals } from "https://deno.land/std@0.116.0/testing/asserts.ts";

const inputs = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9];

let x = 0;
let y = 0;
let z = 0;
let w = 0;

w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 13;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 8;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 12;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 16;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 10;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 4;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -11;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 1;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 14;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 13;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 13;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 5;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 12;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 0;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -5;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 10;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 1);
x += 10;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 7;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += 0;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 2;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -11;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 13;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -13;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 15;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -13;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 14;
y *= x;
z += y;
w = inputs.shift() ?? (() => {
  throw new Error();
})();
x *= 0;
x += z;
x %= 26;
z = Math.floor(z / 26);
x += -11;
x = Number(x === w);
x = Number(x === 0);
y *= 0;
y += 25;
y *= x;
y += 1;
z *= y;
y *= 0;
y += w;
y += 9;
y *= x;
z += y;

assertEquals(z, 0);
